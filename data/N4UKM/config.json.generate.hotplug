bool() {
  [ `cat $1` == "Y" ] && echo "1";
  [ `cat $1` == "N" ] && echo "0";
}

cat << CTAG
{
	name:HOTPLUG,
		elements:[
			
			`if [ -f "/system/bin/mpdecision" ] && [ ! -f "/sys/kernel/msm_mpdecision/conf/enabled" ]; then
			MPDEC=\`ps | grep mpdecision\`
			
			if [ -n "$MPDEC" ]; then 
				MPDEC=1
			else
				MPDEC=0
			fi
			
				echo '{ SPane:{
					title:"MPDecision"
				}},
					{ SCheckBox:{
						label:"Enable",
						description:"Stock Qualcomm hotplug driver and frequency service. This should be disabled if current kernel has an alternative.",
						default:'$MPDEC',
						action:"mpdecision /system/bin/mpdecision"
					}},'
			fi`
			
			`if [ -f "/sys/module/intelli_plug/parameters/intelli_plug_active" ]; then
			INTELLIPLUG=\`cat /sys/module/intelli_plug/parameters/intelli_plug_active\`
			
				echo '{ SPane:{
					title:"Intelliplug"
				}},
					{ SCheckBox:{
						label:"Enable",
						description:"An in kernel replacement for Qualcomms MPDecision. Developed by faux123.",
						default:'$INTELLIPLUG',
						action:"generic /sys/module/intelli_plug/parameters/intelli_plug_active"
					}},'
			fi`
			
			`if [ -f "/sys/module/intelli_plug/parameters/eco_mode_active" ]; then
			ECOMODE=\`cat /sys/module/intelli_plug/parameters/eco_mode_active\`
			
				echo '{ SCheckBox:{
						label:"Eco Mode",
						description:"Special power savings mode where the kernel automatically reconfigures its decisions in real time and optimizes to use only 2 out of 4 cores.",
						default:'$ECOMODE',
						action:"generic /sys/module/intelli_plug/parameters/eco_mode_active"
					}},'
			fi`
			
			`if [ -f "/sys/kernel/msm_cpufreq_limit/cpufreq_limit" ]; then
			SC=\`cat /sys/kernel/msm_cpufreq_limit/cpufreq_limit\`
			
				echo '{ SSeekBar:{
						title:"CPU Frequency Limit (Snakecharmer)",
						description:"Allows you to set a specific Max CPU frequency to ALL cores at the same time.",
						default:'$SC',
						action:"generic /sys/kernel/msm_cpufreq_limit/cpufreq_limit",
						values:{'
							for SNAKE in \`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies\` ; do
							LABEL=$((SNAKE / 1000))
							echo "$SNAKE:\"${LABEL} MHz\", "
							done;
					echo '}
				}},'
			fi`
			
			`if [ -f "/sys/module/msm_thermal/parameters/enabled" ] && [ -f "/sys/module/msm_thermal/parameters/core_limit_temp_degC" ]; then
			THERMAL=\`bool /sys/module/msm_thermal/parameters/enabled\`
			
				echo '{ SCheckBox:{
						label:"Intellithermal",
						description:"Temperature limit toggle.",
						default:'$THERMAL',
						action:"boolean /sys/module/msm_thermal/parameters/enabled"
					}},'
			fi`
			
			`if [ -f "/sys/module/msm_thermal/parameters/limit_temp_degC" ]; then
			TEMP=\`cat /sys/module/msm_thermal/parameters/limit_temp_degC\`
			
			echo '{ SSeekBar:{
					title:"Frequency Throttle Temperature",
					description:"Temperature to start throttling frequencies.",
					unit:"ºC",
					step:1,
					min:50,
					max:100,
					default:'$TEMP',
					action:"generic /sys/module/msm_thermal/parameters/limit_temp_degC"
				}},'
			fi`

			`if [ -f "/sys/module/msm_thermal/parameters/core_limit_temp_degC" ]; then
			TEMP=\`cat /sys/module/msm_thermal/parameters/core_limit_temp_degC\`
			
			echo '{ SSeekBar:{
					title:"Core Throttle Temperature",
					description:"Temperature to start shutting down cores",
					unit:"ºC",
					step:1,
					min:50,
					max:100,
					default:'$TEMP',
					action:"generic /sys/module/msm_thermal/parameters/core_limit_temp_degC"
				}},'
			fi`
			
			`if [ -f "/system/bin/mpdecision" ] && [ -f "/sys/kernel/msm_mpdecision/conf/enabled" ]; then
			MSMMPD=\`cat /sys/kernel/msm_mpdecision/conf/enabled\`
				
				echo '{ SPane:{
					title:"MSM MPDecision"
				}},
					{ SCheckBox:{
						label:"Enable",
						description:"An in kernel replacement for Qualcomms MPDecision. Developed by show-p1984.",
						default:'$MSMMPD',
						action:"generic /sys/kernel/msm_mpdecision/conf/enabled"
					}},'
				
				if [ -f "/sys/kernel/msm_mpdecision/conf/scroff_single_core" ]; then
				SOSC=\`cat /sys/kernel/msm_mpdecision/conf/scroff_single_core\`
				
					echo '{ SCheckBox:{
							label:"Screen off Single Core",
							description:"Use only one core if screen is off.",
							default:'$SOSC',
							action:"generic /sys/kernel/msm_mpdecision/conf/scroff_single_core"
						}},'
				fi
				
				if [ -f "/sys/kernel/msm_mpdecision/conf/min_cpus" ]; then
				MINCPU=\`cat /sys/kernel/msm_mpdecision/conf/min_cpus\`
				
					echo '{ SSeekBar:{
							title:"Min CPUs",
							description:"Minimum CPUs online at any time.",
							min:1,
							max:4,
							step:1,
							default:'$MINCPU',
							action:"generic /sys/kernel/msm_mpdecision/conf/min_cpus",
					}},'
				fi
				
				if [ -f "/sys/kernel/msm_mpdecision/conf/max_cpus" ]; then
				MAXCPU=\`cat /sys/kernel/msm_mpdecision/conf/max_cpus\`
				
					echo '{ SSeekBar:{
							title:"Max CPUs",
							description:"Maximum CPUs online at any time.",
							min:1,
							max:4,
							step:1,
							default:'$MAXCPU',
							action:"generic /sys/kernel/msm_mpdecision/conf/max_cpus",
					}},'
				fi
				
				if [ -f "/sys/kernel/msm_mpdecision/conf/idle_freq" ]; then
				IDLEFREQ=\`cat /sys/kernel/msm_mpdecision/conf/idle_freq\`
				
					echo '{ SSeekBar:{
							title:"Idle Frequency",
							description:"If CPU0 is below this frequency, does not plug in CPU 1-3.",
							default:'$IDLEFREQ',
							action:"generic /sys/kernel/msm_mpdecision/conf/idle_freq",
							values:{'
								for FREQ in \`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies\` ; do
								LABEL=$((FREQ / 1000))
								echo "$FREQ:\"${LABEL} MHz\", "
								done;
						echo '}
					}},'
				fi
				
				if [ -f "/sys/kernel/msm_mpdecision/conf/boost_enabled" ]; then
				BOOST=\`cat /sys/kernel/msm_mpdecision/conf/boost_enabled\`
				
					echo '{ SCheckBox:{
							label:"Event Boost",
							description:"This will boost your minimum CPU speed if you touch the screen or press a button.",
							default:'$BOOST',
							action:"generic /sys/kernel/msm_mpdecision/conf/boost_enabled"
						}},'
				fi
			fi`

			`if [ -f "/sys/module/msm_hotplug/enabled" ]; then
			MSMHOT=\`cat /sys/module/msm_hotplug/enabled\`

				echo '{ SPane:{
					title:"MSM Hotplug"
				}},
					{ SCheckBox:{
						label:"Enable",
						description:"An in kernel replacement for Qualcomms MPDecision. Developed by myfluxi.",
						default:'$MSMHOT',
						action:"generic /sys/module/msm_hotplug/enabled"
					}},'
				
				if [ -f "/sys/module/msm_hotplug/min_cpus_online" ]; then
				MINCPU=\`cat /sys/module/msm_hotplug/min_cpus_online\`
				
					echo '{ SSeekBar:{
							title:"Min CPUs",
							description:"Minimum CPUs online at any time.",
							min:1,
							max:4,
							step:1,
							default:'$MINCPU',
							action:"generic /sys/module/msm_hotplug/min_cpus_online",
					}},'
				fi
				
				if [ -f "/sys/module/msm_hotplug/max_cpus_online" ]; then
				MAXCPU=\`cat /sys/module/msm_hotplug/max_cpus_online\`
				
					echo '{ SSeekBar:{
							title:"Max CPUs",
							description:"Maximum CPUs online at any time.",
							min:1,
							max:4,
							step:1,
							default:'$MAXCPU',
							action:"generic /sys/module/msm_hotplug/max_cpus_online",
					}},'
				fi
				
				if [ -f "/sys/module/msm_hotplug/cpus_boosted" ]; then
				BOOST=\`cat /sys/module/msm_hotplug/cpus_boosted\`
				
					echo '{ SSeekBar:{
							title:"Max CPUs Boosted",
							description:"Maximum number of CPUs boosted at the same time.",
							min:1,
							max:4,
							step:1,
							default:'$BOOST',
							action:"generic /sys/module/msm_hotplug/cpus_boosted",
					}},'
				fi
				
				if [ -f "/sys/module/msm_hotplug/boost_lock_duration" ]; then
				BOOSTLOCK=\`cat /sys/module/msm_hotplug/boost_lock_duration\`

					echo '{ SSeekBar:{
							title:"Boost Lock Duration",
							description:"Minimum interval a CPU is boosted.",
							unit:" ms",
							min:1,
							max:10000,
							step:1,
							default:'$BOOSTLOCK',
							action:"generic /sys/module/msm_hotplug/boost_lock_duration"
					}},'
				fi
				
				if [ -f "/sys/module/msm_hotplug/down_lock_duration" ]; then
				DOWNLOCK=\`cat /sys/module/msm_hotplug/down_lock_duration\`

					echo '{ SSeekBar:{
							title:"Down Lock Duration",
							description:"Minimum interval a CPU is kept online.",
							unit:" ms",
							min:1,
							max:10000,
							step:1,
							default:'$DOWNLOCK',
							action:"generic /sys/module/msm_hotplug/down_lock_duration"
					}},'
				fi
				
				if [ -f "/sys/module/msm_hotplug/history_size" ]; then
				HISTORYSIZE=\`cat /sys/module/msm_hotplug/history_size\`

					echo '{ SSeekBar:{
							title:"History Size",
							description:"Number of samples taken in consideration for avarage load across CPUs. Lower means quicker/more erratic.",
							min:1,
							max:60,
							step:1,
							default:'$HISTORYSIZE',
							action:"generic /sys/module/msm_hotplug/history_size"
					}},'
				fi

				if [ -f "/sys/module/msm_hotplug/update_rate" ]; then
				UPDATERATE=\`cat /sys/module/msm_hotplug/update_rate\`

					echo '{ SSeekBar:{
							title:"Update Rate",
							description:"Interval between taking samples of load across CPUs. Lower means quicker/more erratic.",
							unit:" ms",
							min:1,
							max:60,
							step:1,
							default:'$UPDATERATE',
							action:"generic /sys/module/msm_hotplug/update_rate"
					}},'
				fi

				if [ -f "/sys/module/msm_hotplug/fast_lane_load" ]; then
				FASTLANE=\`cat /sys/module/msm_hotplug/fast_lane_load\`

					echo '{ SSeekBar:{
							title:"Fast Lane Load",
							description:"Improve latencies by instantly putting online all CPUs if current load on any CPU is above a certain threshold. Fast lane load should not be higher than 78, as load per CPU will not be above this value in our metric.",
							min:1,
							max:100,
							step:1,
							default:'$FASTLANE',
							action:"generic /sys/module/msm_hotplug/fast_lane_load"
					}},'
				fi

				if [ -f "/sys/module/msm_hotplug/offline_load" ]; then
				OFFLINELOAD=\`cat /sys/module/msm_hotplug/offline_load\`

					echo '{ SSeekBar:{
							title:"Offline Load",
							description:"Dont offline a CPU if it would drop under the lower levels up threshold load (0 = disabled).",
							min:0,
							max:100,
							step:1,
							default:'$OFFLINELOAD',
							action:"generic /sys/module/msm_hotplug/offline_load"
					}},'
				fi
				
				if [ -f "/sys/module/msm_hotplug/suspend_freq" ]; then
				SUSPFREQ=\`cat /sys/module/msm_hotplug/suspend_freq\`
				
					echo '{ SSeekBar:{
							title:"Suspend Frequency",
							description:"Set the maximum frequency the CPU scales up to when the screen is off.",
							default:'$SUSPFREQ',
							action:"generic /sys/module/msm_hotplug/suspend_freq",
							values:{'
								for FREQ in \`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies\` ; do
								LABEL=$((FREQ / 1000))
								echo "$FREQ:\"${LABEL} MHz\", "
								done;
						echo '}
					}},'
				fi
			fi`
			
			`if [ -d "/sys/module/auto_hotplug/parameters" ]; then
			MSMHOT=\`cat /sys/module/msm_hotplug/enabled\`
			
				echo '{ SPane:{
					title:"Auto Hotplug",
					description:"An in kernel replacement for Qualcomms MPDecision. Developed by Thalamus.",
				}},'
				
				if [ -f "/sys/module/auto_hotplug/parameters/disable_load_threshold" ]; then
				DLT=\`cat /sys/module/auto_hotplug/parameters/disable_load_threshold\`
				
					echo '{ SSeekBar:{
							title:"Disable Load Threshold",
							description:"Load at which a CPU is taken offline.",
							min:40,
							max:125,
							step:1,
							default:'$DLT',
							action:"generic /sys/module/auto_hotplug/parameters/disable_load_threshold"
					}},'
				fi
				
				if [ -f "/sys/module/auto_hotplug/parameters/enable_load_threshold" ]; then
				ELT=\`cat /sys/module/auto_hotplug/parameters/enable_load_threshold\`
				
					echo '{ SSeekBar:{
							title:"Enable Load Threshold",
							description:"Load at which an extra CPU is put online.",
							min:130,
							max:250,
							step:1,
							default:'$ELT',
							action:"generic /sys/module/auto_hotplug/parameters/enable_load_threshold"
					}},'
				fi
			
				if [ -f "/sys/module/auto_hotplug/parameters/enable_all_load_threshold" ]; then
				EALT=\`cat /sys/module/auto_hotplug/parameters/enable_all_load_threshold\`
				
					echo '{ SSeekBar:{
							title:"Enable All Load Threshold",
							description:"Load at which all CPUs are enabled.",
							min:270,
							max:550,
							step:1,
							default:'$EALT',
							action:"generic /sys/module/auto_hotplug/parameters/enable_all_load_threshold"
					}},'
				fi
				
				if [ -f "/sys/module/auto_hotplug/parameters/min_sampling_rate" ]; then
				MSR=\`cat /sys/module/auto_hotplug/parameters/min_sampling_rate\`
				
					echo '{ SSeekBar:{
							title:"Minimum Sampling Period",
							description:"Sample rate in milliseconds, converted to jiffies at runtime.",
							unit:" ms",
							min:10,
							max:50,
							step:1,
							default:'$MSR',
							action:"generic /sys/module/auto_hotplug/parameters/min_sampling_rate"
					}},'
				fi
				
				if [ -f "/sys/module/auto_hotplug/parameters/sampling_periods" ]; then
				SP=\`cat /sys/module/auto_hotplug/parameters/sampling_periods\`
				
					echo '{ SSeekBar:{
							title:"Sampling Period",
							description:"Number of samples in the circular buffer (more samples = less aggressive, less samples = more aggressive).",
							min:5,
							max:50,
							step:1,
							default:'$SP',
							action:"generic /sys/module/auto_hotplug/parameters/sampling_periods"
					}},'
				fi
				
				if [ -f "/sys/module/auto_hotplug/parameters/min_online_cpus" ]; then
				MINCPU=\`cat /sys/module/auto_hotplug/parameters/min_online_cpus\`
				
					echo '{ SSeekBar:{
							title:"Minimum Online CPU",
							description:"Minimum number of cores online (regardless of load) when screen is on (tune up for performance/bench-marking).",
							min:1,
							max:4,
							step:1,
							default:'$MINCPU',
							action:"generic /sys/module/auto_hotplug/parameters/min_online_cpus"
					}},'
				fi
				
				if [ -f "/sys/module/auto_hotplug/parameters/max_online_cpus" ]; then
				MAXCPU=\`cat /sys/module/auto_hotplug/parameters/max_online_cpus\`
				
					echo '{ SSeekBar:{
							title:"Maximum Online CPU",
							description:"Maximum number of cores online (regardless of load) when screen is on (tune down for battery savings)",
							min:1,
							max:4,
							step:1,
							default:'$MAXCPU',
							action:"generic /sys/module/auto_hotplug/parameters/max_online_cpus"
					}},'
				fi
			fi`
		]
}
CTAG
